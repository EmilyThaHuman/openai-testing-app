const { z } = require('zod');
const { ProviderMetadata, providerMetadataSchema } = require('../types/provider-metadata');
const { DataContent, dataContentSchema } = require('./data-content');
const { ToolResultContent, toolResultContentSchema } = require('./tool-result-content');

/**
 * Text content part of a prompt. It contains a string of text.
 */
const TextPart = {
  type: 'text',

  /**
   * The text content.
   */
  text: String,

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that can be fully encapsulated in the provider.
   */
  experimental_providerMetadata: ProviderMetadata
};

const textPartSchema = z.object({
  type: z.literal('text'),
  text: z.string(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});

/**
 * Image content part of a prompt. It contains an image.
 */
const ImagePart = {
  type: 'image',

  /**
   * Image data. Can either be:
   * - data: a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer
   * - URL: a URL that points to the image
   */
  image: DataContent || URL,

  /**
   * Optional mime type of the image.
   */
  mimeType: String,

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that can be fully encapsulated in the provider.
   */
  experimental_providerMetadata: ProviderMetadata
};

const imagePartSchema = z.object({
  type: z.literal('image'),
  image: z.union([dataContentSchema, z.instanceof(URL)]),
  mimeType: z.string().optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});

/**
 * File content part of a prompt. It contains a file.
 */
const FilePart = {
  type: 'file',

  /**
   * File data. Can either be:
   * - data: a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer
   * - URL: a URL that points to the image
   */
  data: DataContent || URL,

  /**
   * Mime type of the file.
   */
  mimeType: String,

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that can be fully encapsulated in the provider.
   */
  experimental_providerMetadata: ProviderMetadata
};

const filePartSchema = z.object({
  type: z.literal('file'),
  data: z.union([dataContentSchema, z.instanceof(URL)]),
  mimeType: z.string(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});

/**
 * Tool call content part of a prompt. It contains a tool call (usually generated by the AI model).
 */
const ToolCallPart = {
  type: 'tool-call',

  /**
   * ID of the tool call. This ID is used to match the tool call with the tool result.
   */
  toolCallId: String,

  /**
   * Name of the tool that is being called.
   */
  toolName: String,

  /**
   * Arguments of the tool call. This is a JSON-serializable object that matches the tool's input schema.
   */
  args: Object,

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that can be fully encapsulated in the provider.
   */
  experimental_providerMetadata: ProviderMetadata
};

const toolCallPartSchema = z.object({
  type: z.literal('tool-call'),
  toolCallId: z.string(),
  toolName: z.string(),
  args: z.unknown()
});

/**
 * Tool result content part of a prompt. It contains the result of the tool call with the matching ID.
 */
const ToolResultPart = {
  type: 'tool-result',

  /**
   * ID of the tool call that this result is associated with.
   */
  toolCallId: String,

  /**
   * Name of the tool that generated this result.
   */
  toolName: String,

  /**
   * Result of the tool call. This is a JSON-serializable object.
   */
  result: Object,

  /**
   * Multi-part content of the tool result. Only for tools that support multipart results.
   */
  experimental_content: ToolResultContent,

  /**
   * Optional flag if the result is an error or an error message.
   */
  isError: Boolean,

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that can be fully encapsulated in the provider.
   */
  experimental_providerMetadata: ProviderMetadata
};

const toolResultPartSchema = z.object({
  type: z.literal('tool-result'),
  toolCallId: z.string(),
  toolName: z.string(),
  result: z.unknown(),
  content: toolResultContentSchema.optional(),
  isError: z.boolean().optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});

module.exports = {
  TextPart,
  textPartSchema,
  ImagePart,
  imagePartSchema,
  FilePart,
  filePartSchema,
  ToolCallPart,
  toolCallPartSchema,
  ToolResultPart,
  toolResultPartSchema
};
